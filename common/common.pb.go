// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RunnerId struct {
	RunnerId             []byte   `protobuf:"bytes,1,opt,name=runnerId,proto3" json:"runnerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunnerId) Reset()         { *m = RunnerId{} }
func (m *RunnerId) String() string { return proto.CompactTextString(m) }
func (*RunnerId) ProtoMessage()    {}
func (*RunnerId) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_cd261040a588f667, []int{0}
}
func (m *RunnerId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunnerId.Unmarshal(m, b)
}
func (m *RunnerId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunnerId.Marshal(b, m, deterministic)
}
func (dst *RunnerId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerId.Merge(dst, src)
}
func (m *RunnerId) XXX_Size() int {
	return xxx_messageInfo_RunnerId.Size(m)
}
func (m *RunnerId) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerId.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerId proto.InternalMessageInfo

func (m *RunnerId) GetRunnerId() []byte {
	if m != nil {
		return m.RunnerId
	}
	return nil
}

type RunnerDescription struct {
	QueueType             []byte   `protobuf:"bytes,1,opt,name=queueType,proto3" json:"queueType,omitempty"`
	QueueConnectionString string   `protobuf:"bytes,2,opt,name=queueConnectionString,proto3" json:"queueConnectionString,omitempty"`
	JobName               string   `protobuf:"bytes,3,opt,name=jobName,proto3" json:"jobName,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RunnerDescription) Reset()         { *m = RunnerDescription{} }
func (m *RunnerDescription) String() string { return proto.CompactTextString(m) }
func (*RunnerDescription) ProtoMessage()    {}
func (*RunnerDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_cd261040a588f667, []int{1}
}
func (m *RunnerDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunnerDescription.Unmarshal(m, b)
}
func (m *RunnerDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunnerDescription.Marshal(b, m, deterministic)
}
func (dst *RunnerDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDescription.Merge(dst, src)
}
func (m *RunnerDescription) XXX_Size() int {
	return xxx_messageInfo_RunnerDescription.Size(m)
}
func (m *RunnerDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDescription.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDescription proto.InternalMessageInfo

func (m *RunnerDescription) GetQueueType() []byte {
	if m != nil {
		return m.QueueType
	}
	return nil
}

func (m *RunnerDescription) GetQueueConnectionString() string {
	if m != nil {
		return m.QueueConnectionString
	}
	return ""
}

func (m *RunnerDescription) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type RegisterResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RunnerId             []byte   `protobuf:"bytes,2,opt,name=runnerId,proto3" json:"runnerId,omitempty"`
	InternalName         string   `protobuf:"bytes,3,opt,name=internalName,proto3" json:"internalName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_cd261040a588f667, []int{2}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (dst *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(dst, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RegisterResponse) GetRunnerId() []byte {
	if m != nil {
		return m.RunnerId
	}
	return nil
}

func (m *RegisterResponse) GetInternalName() string {
	if m != nil {
		return m.InternalName
	}
	return ""
}

type DeregisterResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeregisterResponse) Reset()         { *m = DeregisterResponse{} }
func (m *DeregisterResponse) String() string { return proto.CompactTextString(m) }
func (*DeregisterResponse) ProtoMessage()    {}
func (*DeregisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_cd261040a588f667, []int{3}
}
func (m *DeregisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeregisterResponse.Unmarshal(m, b)
}
func (m *DeregisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeregisterResponse.Marshal(b, m, deterministic)
}
func (dst *DeregisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeregisterResponse.Merge(dst, src)
}
func (m *DeregisterResponse) XXX_Size() int {
	return xxx_messageInfo_DeregisterResponse.Size(m)
}
func (m *DeregisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeregisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeregisterResponse proto.InternalMessageInfo

func (m *DeregisterResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DeregisterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RunnerId)(nil), "RunnerId")
	proto.RegisterType((*RunnerDescription)(nil), "RunnerDescription")
	proto.RegisterType((*RegisterResponse)(nil), "RegisterResponse")
	proto.RegisterType((*DeregisterResponse)(nil), "DeregisterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerClient interface {
	RegisterRunner(ctx context.Context, in *RunnerDescription, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeregisterRunner(ctx context.Context, in *RunnerId, opts ...grpc.CallOption) (*DeregisterResponse, error)
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) RegisterRunner(ctx context.Context, in *RunnerDescription, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/Runner/RegisterRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeregisterRunner(ctx context.Context, in *RunnerId, opts ...grpc.CallOption) (*DeregisterResponse, error) {
	out := new(DeregisterResponse)
	err := c.cc.Invoke(ctx, "/Runner/DeregisterRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
type RunnerServer interface {
	RegisterRunner(context.Context, *RunnerDescription) (*RegisterResponse, error)
	DeregisterRunner(context.Context, *RunnerId) (*DeregisterResponse, error)
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

func _Runner_RegisterRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).RegisterRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Runner/RegisterRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).RegisterRunner(ctx, req.(*RunnerDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeregisterRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeregisterRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Runner/DeregisterRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeregisterRunner(ctx, req.(*RunnerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRunner",
			Handler:    _Runner_RegisterRunner_Handler,
		},
		{
			MethodName: "DeregisterRunner",
			Handler:    _Runner_DeregisterRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_common_cd261040a588f667) }

var fileDescriptor_common_cd261040a588f667 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x6d, 0x8a, 0xd4, 0x26, 0xa7, 0x08, 0xb5, 0x46, 0x48, 0x56, 0xc4, 0x50, 0x79, 0x40, 0x9d,
	0x3c, 0x40, 0x17, 0x66, 0x3a, 0xc0, 0xc2, 0x60, 0xf8, 0x03, 0xa9, 0x39, 0x45, 0x46, 0xcd, 0x39,
	0xd8, 0xce, 0xd0, 0x91, 0x7f, 0x8e, 0x9a, 0x8f, 0xd2, 0x10, 0x06, 0x36, 0xbf, 0xe7, 0xf7, 0xf4,
	0xee, 0xdd, 0x41, 0xaa, 0x6d, 0x59, 0x5a, 0x92, 0x95, 0xb3, 0xc1, 0x8a, 0x5b, 0x88, 0x55, 0x4d,
	0x84, 0xee, 0xf9, 0x9d, 0x65, 0x10, 0xbb, 0xee, 0xcd, 0xa3, 0x55, 0xb4, 0x4e, 0xd5, 0x09, 0x8b,
	0xaf, 0x08, 0x96, 0xad, 0x70, 0x8b, 0x5e, 0x3b, 0x53, 0x05, 0x63, 0x89, 0xdd, 0x40, 0xf2, 0x59,
	0x63, 0x8d, 0x6f, 0x87, 0x0a, 0x3b, 0xcb, 0x0f, 0xc1, 0x36, 0x70, 0xdd, 0x80, 0x47, 0x4b, 0x84,
	0xfa, 0x68, 0x78, 0x0d, 0xce, 0x50, 0xc1, 0xa7, 0xab, 0x68, 0x9d, 0xa8, 0xbf, 0x3f, 0x19, 0x87,
	0xf9, 0x87, 0xdd, 0xbd, 0xe4, 0x25, 0xf2, 0x8b, 0x46, 0xd7, 0x43, 0xb1, 0x87, 0x85, 0xc2, 0xc2,
	0xf8, 0x80, 0x4e, 0xa1, 0xaf, 0x2c, 0x79, 0x3c, 0xaa, 0x7d, 0xad, 0x35, 0x7a, 0xdf, 0xe4, 0xc7,
	0xaa, 0x87, 0x83, 0x36, 0xd3, 0x61, 0x1b, 0x26, 0x20, 0x35, 0x14, 0xd0, 0x51, 0xbe, 0x3f, 0x0b,
	0x1a, 0x70, 0xe2, 0x09, 0xd8, 0x16, 0xdd, 0xff, 0xf3, 0x38, 0xcc, 0x4b, 0xf4, 0x3e, 0x2f, 0xb0,
	0xeb, 0xd7, 0xc3, 0xbb, 0x03, 0xcc, 0xda, 0xd5, 0xb1, 0x07, 0xb8, 0x3c, 0x35, 0x68, 0x19, 0x26,
	0x47, 0x5b, 0xcd, 0x96, 0xf2, 0x77, 0x4d, 0x31, 0x61, 0x1b, 0x58, 0x9c, 0x8d, 0xd3, 0x9a, 0x13,
	0xd9, 0xdf, 0x2e, 0xbb, 0x92, 0xe3, 0x61, 0xc5, 0x64, 0x37, 0x6b, 0xae, 0x7c, 0xff, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0xf7, 0x20, 0x9f, 0xf5, 0x01, 0x00, 0x00,
}
